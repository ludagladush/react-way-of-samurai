{"ast":null,"code":"import { stopSubmit } from 'redux-form';\nimport { authAPI } from '../api/api';\nconst SET_USER_DATA = 'samurai-network/authSET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  return authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let userId = response.data.data.id;\n      let {\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserData(userId, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : 'SomeError';\n      dispatch(stopSubmit('login', {\n        _error: message\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/ludagladushina/react-apps/react-learning-1/src/redux/auth-reducer.js"],"names":["stopSubmit","authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,MAAMC,aAAa,GAAG,mCAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAElD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEJ,WAAGC,MAAM,CAACE;AAFN,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAWH,CAbD;;AAeA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAAEI,EAAAA,IAAI,EAAET,aAAR;AAAuBU,EAAAA,OAAO,EACxF;AAAER,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB;AAD0D,CAAnC,CAAxB;AAGP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/C,SAAOd,OAAO,CAACe,EAAR,GACEC,IADF,CACOC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAIhB,MAAM,GAAGc,QAAQ,CAACC,IAAT,CAAcA,IAAd,CAAmBE,EAAhC;AACA,UAAI;AAAEhB,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAmBY,QAAQ,CAACC,IAAT,CAAcA,IAArC;AAEAJ,MAAAA,QAAQ,CAACF,eAAe,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuB,IAAvB,CAAhB,CAAR;AACH;AACJ,GARF,CAAP;AASH,CAVM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCR,QAAD,IAAc;AAChEd,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EACSN,IADT,CACcC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,UAAIU,OAAO,GAAGN,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CAApC,GAAgE,WAA9E;AACAV,MAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAAE2B,QAAAA,MAAM,EAAEH;AAAV,OAAV,CAAX,CAAR;AACH;AACJ,GART;AASH,CAVM;AAYP,OAAO,MAAMI,MAAM,GAAG,MAAOb,QAAD,IAAc;AACtCd,EAAAA,OAAO,CAAC2B,MAAR,GACSX,IADT,CACcC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GALT;AAMH,CAPM;AASP,eAAeL,WAAf","sourcesContent":["import { stopSubmit } from 'redux-form';\nimport { authAPI } from '../api/api';\n\nconst SET_USER_DATA = 'samurai-network/authSET_USER_DATA';\n \n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n               ...action.payload\n            }\n\n        default: \n            return state;\n\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: \n        { userId, email, login, isAuth } });\n\nexport const getAuthUserData = () => (dispatch) => {\n    return authAPI.me()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let userId = response.data.data.id;\n                    let { email, login } = response.data.data;\n                    \n                    dispatch(setAuthUserData(userId, email, login, true));\n                }\n            });\n}\n\nexport const login = (email, password, rememberMe) => (dispatch) => {\n    authAPI.login(email, password, rememberMe)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getAuthUserData())\n                } else {\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'SomeError';\n                    dispatch(stopSubmit('login', { _error: message }));\n                }\n            });\n}\n\nexport const logout = () => (dispatch) => {\n    authAPI.logout()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setAuthUserData(null, null, null, false));\n                }\n            });\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}