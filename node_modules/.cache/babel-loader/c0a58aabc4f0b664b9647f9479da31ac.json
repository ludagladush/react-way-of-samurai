{"ast":null,"code":"import { stopSubmit } from 'redux-form';\nimport { authAPI } from '../api/api';\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let userId = response.data.data.id;\n    let {\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(userId, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'SomeError';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/ludagladushina/react-apps/react-learning-1/src/redux/auth-reducer.js"],"names":["stopSubmit","authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout","then"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,MAAMC,aAAa,GAAG,oCAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAElD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEJ,WAAGC,MAAM,CAACE;AAFN,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAWH,CAbD;;AAeA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAAEI,EAAAA,IAAI,EAAET,aAAR;AAAuBU,EAAAA,OAAO,EACxF;AAAER,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB;AAD0D,CAAnC,CAAxB;AAGP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAIC,QAAQ,GAAG,MAAMf,OAAO,CAACgB,EAAR,EAArB;;AACA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAIf,MAAM,GAAGY,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBE,EAAhC;AACA,QAAI;AAAEf,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBU,QAAQ,CAACE,IAAT,CAAcA,IAArC;AACAH,IAAAA,QAAQ,CAACF,eAAe,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuB,IAAvB,CAAhB,CAAR;AACH;AACJ,CAPM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC,MAAOP,QAAP,IAAoB;AACtE,MAAIC,QAAQ,GAAG,MAAMf,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,CAArB;;AACA,MAAIN,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAFD,MAEO;AACH,QAAIS,OAAO,GAAGP,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCT,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CAApC,GAAgE,WAA9E;AACAT,IAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAAE0B,MAAAA,MAAM,EAAEH;AAAV,KAAV,CAAX,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMI,MAAM,GAAG,MAAM,MAAOZ,QAAP,IAAoB;AAC5C,MAAIC,QAAQ,GAAGf,OAAO,CAAC0B,MAAR,GACNC,IADM,CACDZ,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GALM,CAAf;AAMH,CAPM;AASP,eAAeL,WAAf","sourcesContent":["import { stopSubmit } from 'redux-form';\nimport { authAPI } from '../api/api';\n\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\n \n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n               ...action.payload\n            }\n\n        default: \n            return state;\n\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: \n        { userId, email, login, isAuth } });\n\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.me();\n    if (response.data.resultCode === 0) {\n        let userId = response.data.data.id;\n        let { email, login } = response.data.data;\n        dispatch(setAuthUserData(userId, email, login, true));\n    }\n}\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe);\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData())\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'SomeError';\n        dispatch(stopSubmit('login', { _error: message }));\n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    let response = authAPI.logout()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setAuthUserData(null, null, null, false));\n                }\n            });\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}