{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: 'FOLLOW',\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: 'UNFOLLOW',\n  userId\n});\nexport const setUsers = users => ({\n  type: 'SET_USERS',\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: 'TOGGLE_IS_FETCHING',\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n  isFetching,\n  userId\n});\nexport const getUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport const follow = id => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, id));\n    usersAPI.follow(id).then(data => {\n      if (data.resultCode === 0) {\n        dispatch.follow(id);\n      }\n\n      props.toggleFollowingProgress(false, id);\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/ludagladushina/react-apps/react-learning-1/src/redux/users-reducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","getUsers","dispatch","then","data","items","totalCount","follow","resultCode","props"],"mappings":"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","sourcesContent":["import { usersAPI } from \"../api/api\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: []\n}\n\nconst usersReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map( u => {\n                    if (u.id === action.userId) {\n                        return {  ...u, followed: true }\n                    }\n                    return u;\n                })\n            }          \n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map( u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: false }\n                    }\n                    return u;\n                })\n            }\n\n        case SET_USERS: {\n            return { ...state, users: action.users };\n        }\n        \n        case SET_CURRENT_PAGE: {\n            return { ...state, currentPage: action.currentPage };\n        }\n\n        case SET_TOTAL_USERS_COUNT: {\n            return { ...state, totalUsersCount: action.count };\n        }\n\n        case TOGGLE_IS_FETCHING: {\n            return { ...state, isFetching: action.isFetching };\n        }\n\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return { \n                ...state, \n                followingInProgress: action.isFetching\n                ? [...state.followingInProgress, action.userId]\n                : state.followingInProgress.filter(id => id != action.userId) };\n        }\n\n\n        default: \n            return state;\n\n    }\n};\n\nexport const followSuccess = (userId) => ({ type: 'FOLLOW', userId });\nexport const unfollowSuccess = (userId) => ({ type: 'UNFOLLOW', userId });\nexport const setUsers = (users) => ({ type: 'SET_USERS', users });\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage });\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\nexport const toggleIsFetching  = (isFetching) => ({ type: 'TOGGLE_IS_FETCHING', isFetching });\nexport const toggleFollowingProgress  = (isFetching, userId) => ({ type: 'TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId });\n\nexport const getUsers = (currentPage, pageSize) => {\n\n    return (dispatch) => {\n        dispatch(toggleIsFetching(true));\n\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalCount));\n        })\n    } \n}\n\nexport const follow = (id) => {\n\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, id));\n            usersAPI.follow(id)\n                .then(data => {\n                    if ( data.resultCode === 0) {\n                        dispatch.follow(id); \n                    }\n                    props.toggleFollowingProgress(false, id);\n                });\n    }  \n}\n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}