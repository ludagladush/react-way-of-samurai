{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport updateObjectinArray from '..';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectinArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const requestUsers = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\n\nconst followUnfollowFlow = async (dispatch, id, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, id));\n  let response = await apiMethod.follow(id);\n\n  if (response.data.resultCode === 0) {\n    dispatch(actionCreator(id));\n  }\n\n  dispatch(toggleFollowingProgress(false, id));\n};\n\nexport const follow = id => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, id, usersAPI.follow.bind(usersAPI), followSuccess);\n  };\n};\nexport const unfollow = id => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, id, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/ludagladushina/react-apps/react-learning-1/src/redux/users-reducer.js"],"names":["usersAPI","updateObjectinArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userId","followed","map","u","id","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","data","getUsers","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","response","follow","resultCode","bind","unfollow"],"mappings":"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","sourcesContent":["import { usersAPI } from \"../api/api\";\nimport updateObjectinArray from '..'\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: []\n}\n\nconst usersReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectinArray(state.users, action.userId, 'id', { followed: true })\n            }          \n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map( u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: false }\n                    }\n                    return u;\n                })\n            }\n\n        case SET_USERS: {\n            return { ...state, users: action.users };\n        }\n        \n        case SET_CURRENT_PAGE: {\n            return { ...state, currentPage: action.currentPage };\n        }\n\n        case SET_TOTAL_USERS_COUNT: {\n            return { ...state, totalUsersCount: action.count };\n        }\n\n        case TOGGLE_IS_FETCHING: {\n            return { ...state, isFetching: action.isFetching };\n        }\n\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return { \n                ...state, \n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default: \n            return state;\n\n    }\n};\n\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId });\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId });\nexport const setUsers = (users) => ({ type: SET_USERS, users });\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage });\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount });\nexport const toggleIsFetching  = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\nexport const toggleFollowingProgress  = (isFetching, userId) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId });\n\nexport const requestUsers = (page, pageSize) => {\n\n    return async (dispatch) => {\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(page));\n\n        let data = await usersAPI.getUsers(page, pageSize);\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalCount));\n    } \n}\n\nconst followUnfollowFlow = async (dispatch, id, apiMethod, actionCreator) => {\n    dispatch(toggleFollowingProgress(true, id));\n        let response = await apiMethod.follow(id);\n            if ( response.data.resultCode === 0) {\n                dispatch(actionCreator(id)); \n            }\n            dispatch(toggleFollowingProgress(false, id));\n}\n\nexport const follow = (id) => {\n    return async (dispatch) => {\n        followUnfollowFlow(dispatch, id, usersAPI.follow.bind(usersAPI), followSuccess);\n    }  \n}\n\nexport const unfollow = (id) => {\n    return async (dispatch) => {\n        followUnfollowFlow(dispatch, id, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\n    }  \n} \n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}