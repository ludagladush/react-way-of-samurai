{"ast":null,"code":"import { authAPI } from '../api/api';\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: 'SET_USER_DATA',\n  payload: {\n    userId,\n    email,\n    login,\n    isA\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(data => {\n    if (data.resultCode === 0) {\n      let {\n        userId,\n        email,\n        login\n      } = data.data;\n      dispatch(setAuthUserData(userId, email, login));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/ludagladushina/react-apps/react-learning-1/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","payload","isA","getAuthUserData","dispatch","me","then","resultCode","password","rememberMe","response","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAElD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEJ,WAAGC,MAAM,CAACE,IAFN;AAGJL,QAAAA,MAAM,EAAE;AAHJ,OAAP;;AAMJ;AACI,aAAOE,KAAP;AATR;AAYH,CAdD;;AAgBA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAAEI,EAAAA,IAAI,EAAE,eAAR;AAAyBG,EAAAA,OAAO,EAClE;AAAEV,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBS,IAAAA;AAAxB;AADkC,CAAnC,CAAxB;AAGP,OAAO,MAAMC,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/ChB,EAAAA,OAAO,CAACiB,EAAR,GACSC,IADT,CACcP,IAAI,IAAI;AACV,QAAIA,IAAI,CAACQ,UAAL,KAAoB,CAAxB,EAA2B;AACvB,UAAI;AAAEhB,QAAAA,MAAF;AAAUC,QAAAA,KAAV;AAAiBC,QAAAA;AAAjB,UAA2BM,IAAI,CAACA,IAApC;AACAK,MAAAA,QAAQ,CAACJ,eAAe,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,CAAhB,CAAR;AACH;AACJ,GANT;AAOH,CARM;AAUP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAkCL,QAAD,IAAc;AAChEhB,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EACSH,IADT,CACcI,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACX,IAAT,CAAcQ,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH;AACJ,GALT;AAMH,CAPM;AASP,OAAO,MAAMQ,MAAM,GAAG,MAAOP,QAAD,IAAc;AACtChB,EAAAA,OAAO,CAACuB,MAAR,GACSL,IADT,CACcI,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACX,IAAT,CAAcQ,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH;AACJ,GALT;AAMH,CAPM;AASP,eAAeR,WAAf","sourcesContent":["import { authAPI } from '../api/api';\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n \n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n               ...action.data,\n               isAuth: true\n            }\n\n        default: \n            return state;\n\n    }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: 'SET_USER_DATA', payload: \n                                { userId, email, login, isA } });\n\nexport const getAuthUserData = () => (dispatch) => {\n    authAPI.me()\n            .then(data => {\n                if (data.resultCode === 0) {\n                    let { userId, email, login } = data.data;\n                    dispatch(setAuthUserData(userId, email, login));\n                }\n            });\n}\n\nexport const login = (email, password, rememberMe) => (dispatch) => {\n    authAPI.login(email, password, rememberMe)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getAuthUserData());\n                }\n            });\n}\n\nexport const logout = () => (dispatch) => {\n    authAPI.logout()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(getAuthUserData());\n                }\n            });\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}